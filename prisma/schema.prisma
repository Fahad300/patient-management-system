generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Patient {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           String
  email            String            @unique
  phone            String
  bloodGroup       String?
  address          Address?
  medicalHistory   MedicalHistory[]
  allergies        Allergy[]
  emergencyContacts EmergencyContact[]
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appointments     Appointment[]
  queueEntries     Queue[]
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zipCode   String
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String   @unique
}

model MedicalHistory {
  id          String   @id @default(cuid())
  condition   String
  diagnosis   String
  year        String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
}

model Allergy {
  id          String   @id @default(cuid())
  name        String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
}

model EmergencyContact {
  id          String   @id @default(cuid())
  name        String
  relationship String
  phone        String
  patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId    String
}

model TimeSlot {
  id          String      @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean     @default(false)
  doctorId    String      // Will be used when we add doctors
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  appointment Appointment?
}

model Appointment {
  id          String      @id @default(cuid())
  patient     Patient     @relation(fields: [patientId], references: [id])
  patientId   String
  timeSlot    TimeSlot    @relation(fields: [timeSlotId], references: [id])
  timeSlotId  String      @unique
  status      String      @default("PENDING") // Can be: "PENDING", "CONFIRMED", "COMPLETED", "CANCELLED"
  type        String      // e.g., "Consultation", "Follow-up", etc.
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  queueEntry  Queue?
}

model Queue {
  id            String      @id @default(cuid())
  patient       Patient     @relation(fields: [patientId], references: [id])
  patientId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  status        String      @default("WAITING") // WAITING, IN_CONSULTATION, COMPLETED, CANCELLED
  priority      Int         @default(0) // Higher number means higher priority
  notes         String?
  checkInTime   DateTime    @default(now())
  startTime     DateTime?   // When consultation started
  endTime       DateTime?   // When consultation ended
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
} 